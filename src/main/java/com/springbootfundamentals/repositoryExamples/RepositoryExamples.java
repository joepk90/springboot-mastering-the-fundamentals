package com.springbootfundamentals.repositoryExamples;

import org.springframework.context.ConfigurableApplicationContext;

import com.springbootfundamentals.store.services.UserService;

import lombok.AllArgsConstructor;

import com.springbootfundamentals.store.entities.User;
import com.springbootfundamentals.store.repositories.UserRepository;

@AllArgsConstructor
public class RepositoryExamples {
    // this works because of the @AllArgsConstructor annotation. context is instantiated under the hood by spring
    ConfigurableApplicationContext context;

    public void main() {
        /**
		 * Examples
		 */

		// usingRepositories();
		// managingTransactions();
		// fetchingStategies();
        // understandingFetchStrategiesExercise();
        // persistingRelatedEntities();
        // deletingRelatedEntities();
        deletingRelatedEntitiesAndTheirOrphans();
    }

    public void usingRepositories() {
        // note: the UserRepository class is generated by springboot at run time (we didn't create this class, only the interface)   
		var repository = context.getBean(UserRepository.class);

        // create and save user
		var user = User.builder()
			.name("John")
			.email("john@gmail.com")
			.password("password")
			.build();

		repository.save(user);

        // find user by id
        var user1 = repository.findById(1L).orElseThrow(); // alternatively return null: orElse(null)
        System.out.println(user1.getEmail());

        repository.findAll().forEach(u -> System.out.println(u.getEmail()));

        // delete user by id
        repository.deleteById(1L);
    }
    
    public void managingTransactions() {
        var service = context.getBean(UserService.class);
        service.showEntityStates();
    }

    /**
     * Fetching Strategies
     * 
     * Eager Loading - related objects are immediatly loaded.
     * This it the default strategy for:
     * - OneToOne
     * - ManyToMany
     * 
     * Lazy Loading - related objects are loaded when accessedd
     * This it the default strategy for:
     * - OneToMany
     * - ManyToOne
    */
    public void fetchingStategies() {
        var service = context.getBean(UserService.class);
        service.showRelatedEntities();
    }
    public void understandingFetchStrategiesExercise() {
        var service = context.getBean(UserService.class);
        service.fetchAddress();
    }

    public void persistingRelatedEntities() {
        var service = context.getBean(UserService.class);
        service.persistRelationship();
    }

    public void deletingRelatedEntities() {
        var service = context.getBean(UserService.class);
        service.deleteRelated();
    }

    public void deletingRelatedEntitiesAndTheirOrphans() {
        var service = context.getBean(UserService.class);
        service.deleteRelatedAndOrphaned();
    }
}

